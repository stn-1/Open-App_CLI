package main

import (
	"bufio"
	"fmt"
	"myapp/myfunc"
	"os"
	"strconv"
	"strings"
)

func main() {
    db, err := myfunc.InitDB()
    if err != nil {
        fmt.Println(err)
        return
    }
    defer db.Close()

    err = myfunc.GetAllResourcesByName(db)
    if err != nil {
        fmt.Println(err)
    }

    reader := bufio.NewReader(os.Stdin)

    fmt.Println("Enter what you want")
    for {
        fmt.Print(">>> ")
        line, _ := reader.ReadString('\n')
        line = strings.TrimSpace(line)

        if line == "quit" {
            fmt.Println("Bye!")
            break
        }

        parts := strings.Fields(line) // t√°ch theo d·∫•u c√°ch
        if len(parts) == 0 {
            continue
        }

        switch parts[0] {
        case "reload":
            err = myfunc.GetAllResourcesByName(db)
            if err != nil {
                fmt.Println(err)
            }
        case "showdb":
            myfunc.ShowDB(db)
        case "find":
            if len(parts) < 2 {
                fmt.Println("B·∫°n c·∫ßn nh·∫≠p √≠t nh·∫•t m·ªôt t√™n app sau 'find'")
                continue
            }
            myfunc.FindRes(db, parts[1:]) // truy·ªÅn danh s√°ch app
		case "makegroup":
			listID:=[]int{}
			if len(parts) < 3 {
			fmt.Println("B·∫°n c·∫ßn nh·∫≠p √≠t nh·∫•t m·ªôt t√™n app sau 'find'")
				continue
			}
			for _,id := range parts[2:]{
				idres,err:=strconv.Atoi(id)
				if(err!=nil){
					fmt.Println("‚ùå L·ªói chuy·ªÉn ID:", err)
           			continue
				}
				listID = append(listID,idres)
			}
			err:=myfunc.CreateGroup(db,parts[1],listID)
			if err!=nil{
				fmt.Println("l·ªói ·ªü h√†m CreateGroup ",err)
			}
		case "del":
			if len(parts) < 2 {
                fmt.Println("B·∫°n c·∫ßn nh·∫≠p √≠t nh·∫•t m·ªôt t√™n group")
                continue
            }
			myfunc.DeleteGroupByName(db,parts[1])
		case "addweb":
			if len(parts) < 3 {
                fmt.Println("B·∫°n c·∫ßn nh·∫≠p theo format addweb+<name>+<path>")
                continue
            }
			myfunc.SaveWebToDB(db,parts[1],parts[2])
			fmt.Println("web ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database")
		case "showgroup":
			myfunc.ShowGroups(db)
		case "rungroup":
			myfunc.RunGroup(db,parts[1])
		case "delres":
			if len(parts) < 3 {
				fmt.Println("B·∫°n c·∫ßn nh·∫≠p theo format: delres <id|name> <gi√° tr·ªã>")
				continue
			}
			mode := parts[1]
			value := parts[2]

			if mode == "id" {
				id, err := strconv.Atoi(value)
				if err != nil {
					fmt.Println("‚ùå ID ph·∫£i l√† s·ªë:", err)
					continue
				}
				err = myfunc.DeleteResourceByID(db, id)
				if err != nil {
					fmt.Println(err)
				}
			} else if mode == "name" {
				err = myfunc.DeleteResourceByName(db, value)
				if err != nil {
					fmt.Println(err)
				}
			} else {
				fmt.Println("‚ö†Ô∏è C√°ch d√πng: delres <id|name> <gi√° tr·ªã>")
			}
		case "help":
			fmt.Println("üìå Danh s√°ch l·ªánh c√≥ s·∫µn:")
			fmt.Println("  reload                - T·∫£i l·∫°i d·ªØ li·ªáu resource t·ª´ DB")
			fmt.Println("  showdb                - Hi·ªÉn th·ªã to√†n b·ªô resource trong DB")
			fmt.Println("  find <name...>        - T√¨m resource theo t√™n")
			fmt.Println("  makegroup <gname> <ids...> - T·∫°o group m·ªõi v·ªõi danh s√°ch resource ID")
			fmt.Println("  del <gname>           - X√≥a group theo t√™n")
			fmt.Println("  addweb <name> <url>   - L∆∞u m·ªôt web app v√†o DB")
			fmt.Println("  showgroup             - Hi·ªÉn th·ªã to√†n b·ªô group trong DB")
			fmt.Println("  rungroup <gname>      - Ch·∫°y t·∫•t c·∫£ resource trong group")
			fmt.Println("  quit                  - Tho√°t ch∆∞∆°ng tr√¨nh")
			fmt.Println("  help                  - Hi·ªÉn th·ªã danh s√°ch l·ªánh")
			fmt.Println("  delres id <id>        - X√≥a resource theo id (v√≠ d·ª•: delres id 3)")
    		fmt.Println("  delres name <name>    - X√≥a resource theo t√™n (v√≠ d·ª•: delres name chrome)")
        default:
            fmt.Println("L·ªánh kh√¥ng h·ª£p l·ªá:", parts[0])
        }
    }
}
